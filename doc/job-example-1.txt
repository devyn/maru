user -> master

  -> 1/NEWGOAL({name: "Compile MyAwesomeHaskellProject"})
  <- 1/=> 3232

  -> 2/NEWJOB({ name: "GHC: compile Main.hs"
              , kind: "ghc_compile"
              , goal: 3232
              , id: "Main.hs" # local to goal
              , dependencies: {"Assistant.hs": ["Assistant.hi"]} # {dependency-id: [dependency-file, ...], dependency-id: "*"}
                                                                 # "*" means all files (is a glob). [] would mean none.
                                                                 # it's possible to depend on jobs that don't exist yet
              , files: {"http://maru.example.com/data/3232/Main.hs": <sha256>}
              , instructions: { options: "-threaded -rtsopts -O2"
                              , file: "Main.hs"
                              }
              })
  <- 2/=> 3232 "Main.hs"

  -> 3/NEWJOB({ name: "GHC: compile Assistant.hs"
              , kind: "ghc_compile"
              , goal: 3232
              , id: "Assistant.hs"
              , files: {"http://maru.example.com/data/3232/Assistant.hs": <sha256>}
              , instructions: { options: "-threaded -rtsopts -O2"
                              , file: "Assistant.hs"
                              }
              })
  <- 3/=> 3232 "Assistant.hs"

  -> 4/NEWJOB({ name: "GHC: link program"
              , kind: "ghc_link"
              , goal: 3232
              , id: "program"
              , dependencies: {"Main.hs": "*.{hi,o}", "Assistant.hs": "*.{hi,o}"}
              , instructions: { options: "-threaded -rtsopts -O2"
                              , module: "Main"
                              , output: "program"
                              }
              })
  <- 4/=> 3232 "program"

  -> GRANTGOALTONETWORK 3232 "sirnet"

master -> network

  -> ADVERTISE

network -> worker

  -> ADVERTISEMENT "maru.example.com:3030"

worker -> master

  # Work out authentication!

  -> READY
  <- OFFER 3232 "Assistant.hs"

  -> 56/ACCEPT 3232 "Assistant.hs"
  <- 56/=> OK { name: "GHC: compile Assistant.hs", ... }

  -> BUSY # also to everyone else

  -> RESULTFILE 3232 "Assistant.hs" "Assistant.hi"  <sha256> <URL>
  -> RESULTFILE 3232 "Assistant.hs" "Assistant.o"   <sha256> <URL>
  -> RESULTFILE 3232 "Assistant.hs" "Assistant.log" <sha256> <URL>

  -> 57/RESULT  3232 "Assistant.hs" OK
  <- 57/=> OK

  -> READY
  <- OFFER 3232 "Main.hs"

  # ... someone else grabs it ...

  -> 58/ACCEPT 3232 "Main.hs"
  <- 58/=> UNAVAILABLE

  # ... waits, then ...

  <- OFFER 3232 "program"
  -> 59/ACCEPT 3232 "program"
  <- 59/=> OK { name: "GHC: link program", ... }

  -> BUSY

  -> RESULTFILE 3232 "program" "program" <sha256> <URL>

  -> 60/RESULT  3232 "program" OK # last argument will be saved and given to dependent jobs
  <- 60/=> OK

  -> READY

master -> network

  -> UNADVERTISE 3232
